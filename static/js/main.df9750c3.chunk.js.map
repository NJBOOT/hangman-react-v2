{"version":3,"sources":["components/LetterBox/LetterBox.module.css","components/Letters/Letters.module.css","components/Nav/Nav.module.css","components/Modal/Modal.module.css","components/Backdrop/Backdrop.module.css","components/Button/Button.module.css","helpers.js","components/LetterBox/LetterBox.js","components/Letters/Letters.js","components/Nav/Nav.js","components/Backdrop/Backdrop.js","components/Button/Button.js","components/Modal/Modal.js","containers/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","wordList","letters","LetterBox","props","className","classes","Letter","el","Letters","answerArray","map","i","key","Nav","style","marginLeft","wins","textTransform","guessed","guessesLeft","Backdrop","visible","Button","onClick","handleClick","children","Modal","message","gameWon","gameOver","transform","opacity","color","playAgain","Main","state","secretWord","generateWord","index","Math","floor","random","length","split","forEach","push","setState","checkValidity","guess","includes","correctUserGuess","incorrectUserGuess","concat","wordsMatch","join","handleUserGuess","e","userGuess","this","document","addEventListener","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.df9750c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LetterBox\":\"LetterBox_LetterBox__qNOak\",\"Letter\":\"LetterBox_Letter__28hLc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Letters\":\"Letters_Letters__3XA1d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Nav\":\"Nav_Nav__cViw5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__2WBTT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__2O1l9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3R1xi\"};","export const wordList = [\n  \"plain\",\n  \"valid\",\n  \"card\",\n  \"landowner\",\n  \"visit\",\n  \"temple\",\n  \"reduction\",\n  \"feminine\",\n  \"attachment\",\n  \"capital\",\n  \"publication\",\n  \"jury\",\n  \"silence\",\n  \"cover\",\n  \"leaflet\",\n  \"layer\",\n  \"margin\",\n  \"science\",\n  \"wind\",\n  \"posture\",\n];\nexport const letters = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n];\n","import React from \"react\";\nimport classes from \"./LetterBox.module.css\";\n\nconst LetterBox = props => {\n  return (\n    <div className={classes.LetterBox}>\n      <div className={classes.Letter}>{props.el}</div>\n    </div>\n  );\n};\n\nexport default LetterBox;\n","import React from \"react\";\nimport classes from \"./Letters.module.css\";\nimport LetterBox from \"../LetterBox/LetterBox\";\n\nconst Letters = props => {\n  return (\n    <div className={classes.Letters}>\n      {props.answerArray.map((el, i) => (\n        <LetterBox key={i} el={el} />\n      ))}\n    </div>\n  );\n};\n\nexport default Letters;\n","import React from \"react\";\nimport classes from \"./Nav.module.css\";\nconst Nav = props => {\n  return (\n    <nav className={classes.Nav}>\n      <h1 style={{ marginLeft: 20 }}>React Hangman</h1>\n      <ul>\n        <li>\n          Wins: <strong>{props.wins}</strong>\n        </li>\n        <li>\n          Guessed Letters:{\" \"}\n          <span style={{ textTransform: \"uppercase\" }}>\n            <strong>{props.guessed}</strong>\n          </span>\n        </li>\n        <li>\n          Guesses Left: <strong>{props.guessesLeft}</strong>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport classes from \"./Backdrop.module.css\";\n\nconst Backdrop = props => {\n  return props.visible ? <div className={classes.Backdrop}></div> : null;\n};\n\nexport default Backdrop;\n","import React from \"react\";\nimport classes from \"./Button.module.css\";\nconst Button = props => {\n  return (\n    <button className={classes.Button} onClick={props.handleClick}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { Fragment } from \"react\";\nimport classes from \"./Modal.module.css\";\nimport Backdrop from \"../Backdrop/Backdrop\";\nimport Button from \"../Button/Button\";\n\nconst Modal = props => {\n  let message = props.gameWon ? \"Congrats, you won.\" : \"Sorry, you lost\";\n\n  return (\n    <Fragment>\n      <Backdrop visible={props.gameOver} />\n      <div\n        className={classes.Modal}\n        style={{\n          transform: props.gameOver ? \"translateY(0)\" : \"translateY(-100vh)\",\n          opacity: props.gameOver ? 1 : 0,\n          color: props.gameWon ? \"green\" : \"red\",\n        }}\n      >\n        <h1>{message}</h1>\n        <Button handleClick={props.playAgain}>PLAY AGAIN?</Button>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Modal;\n","import React, { Component, Fragment } from \"react\";\nimport { letters, wordList } from \"../../helpers\";\nimport Letters from \"../../components/Letters/Letters\";\nimport Nav from \"../../components/Nav/Nav\";\nimport Modal from \"../../components/Modal/Modal\";\n\nclass Main extends Component {\n  state = {\n    answerArray: [],\n    guessed: [],\n    guessesLeft: 8,\n    wins: 0,\n    secretWord: \"\",\n    gameOver: false,\n    gameWon: false,\n  };\n\n  componentDidMount() {\n    this.generateWord();\n    document.addEventListener(\"keydown\", this.handleUserGuess);\n  }\n\n  generateWord = () => {\n    const index = Math.floor(Math.random() * wordList.length);\n    const secretWord = wordList[index];\n    let answerArray = [];\n    secretWord.split(\"\").forEach(el => answerArray.push(\" \"));\n    this.setState({ secretWord: secretWord, answerArray: answerArray });\n  };\n\n  checkValidity = guess => {\n    if (\n      letters.includes(guess) &&\n      this.state.guessesLeft > 0 &&\n      !this.state.guessed.includes(guess)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  playAgain = () => {\n    this.setState({\n      answerArray: [],\n      guessed: [],\n      guessesLeft: 8,\n      secretWord: \"\",\n      gameOver: false,\n      gameWon: false,\n    });\n    this.generateWord();\n  };\n\n  correctUserGuess = guess => {\n    for (let i = 0; i < this.state.secretWord.length; i++) {\n      if (guess === this.state.secretWord[i]) {\n        let answerArray = this.state.answerArray;\n        answerArray[i] = guess;\n        this.setState({ answerArray: answerArray });\n      }\n    }\n  };\n\n  incorrectUserGuess = guess => {\n    this.setState({\n      guessesLeft: this.state.guessesLeft - 1,\n      guessed: this.state.guessed.concat(guess),\n    });\n  };\n\n  wordsMatch = () => {\n    return this.state.secretWord === this.state.answerArray.join(\"\");\n  };\n\n  gameWon = () => {\n    this.setState({\n      wins: this.state.wins + 1,\n      gameOver: true,\n      gameWon: true,\n    });\n  };\n\n  handleUserGuess = e => {\n    let userGuess = e.key;\n    if (this.checkValidity(userGuess)) {\n      if (this.state.secretWord.includes(userGuess)) {\n        this.correctUserGuess(userGuess);\n        if (this.wordsMatch()) {\n          this.gameWon();\n        }\n      } else {\n        this.incorrectUserGuess(userGuess);\n        if (this.state.guessesLeft === 0) {\n          this.setState({ gameOver: true });\n        }\n      }\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Nav\n          wins={this.state.wins}\n          guessed={this.state.guessed}\n          guessesLeft={this.state.guessesLeft}\n        />\n        <Modal\n          gameWon={this.state.gameWon}\n          gameOver={this.state.gameOver}\n          playAgain={this.playAgain}\n        />\n        <Letters answerArray={this.state.answerArray} />\n      </Fragment>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./containers/Main/Main\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}